
from shapely.geometry import Point
from typing import Dict
import pandas as pd
import math
import random
import numpy as np
import os
import matplotlib
matplotlib.use('Agg')  
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from collections import Counter
from docx import Document
from typing import Tuple
from docx.shared import Inches
from datetime import datetime
from matplotlib.patches import Patch
from collections import defaultdict
import subprocess
import geopandas as gpd
from io import StringIO
import sys
from openpyxl import load_workbook
from openpyxl.utils.dataframe import dataframe_to_rows
import openpyxl

#################################################################################################################################
#
#          
#
#
#                     SIMULATEUR √âLECTORAL DU P√âROU CONFORME √Ä LA LOE (LEY ORG√ÅNICA DE ELECCIONES)
#
#
#
#
#################################################################################################################################

#################################################################################################################################
# PARAM√àTRES
#################################################################################################################################
SEUIL_ELECTORAL = 5
NB_DEPUTES = 130
NB_SENATEURS_TOTAL = 60
NB_SENATEURS_MAJ = 30
NB_SENATEURS_PROP = 34
NB_SENATEURS_LIMA = 4
NB_SENATEURS_NATIONAL = 30

# R√©partition r√©elle des si√®ges par district (selon le tableau officiel 2026)
DISTRIBUTION_DEPUTES = {
    "Amazonas": 2, "Ancash": 5, "Apur√É¬≠mac": 2, "Arequipa": 6, "Ayacucho": 3,
    "Cajamarca": 6, "Callao": 4, "Cusco": 5, "Huancavelica": 2, "Hu√É¬°nuco": 3,
    "Ica": 4, "Jun√É¬≠n": 5, "La Libertad": 7, "Lambayeque": 5, "Lima Metropolitana": 32,
    "Lima Provincias": 4, "Exteriores": 2, "Loreto": 4, "Madre de Dios": 2,
    "Moquegua": 2, "Pasco": 2, "Piura": 7, "Puno": 5, "San Mart√É¬≠n": 4,
    "Tacna": 2, "Tumbes": 2, "Ucayali": 3
}

#################################################################################################################################
# MONTE CARLO SIMULATIONS (D√©put√©s uniquement)
#################################################################################################################################

def simulation_monte_carlo(pourcentages: Dict[str, float], n_iterations: int = 250) -> pd.DataFrame:
    resultats = []
    pourcentages_filtr√©s = {p: v for p, v in pourcentages.items() if v >= SEUIL_ELECTORAL}
    for _ in range(n_iterations):
        try:
            perturb√©s = {p: max(0, v + random.uniform(-2, 2)) for p, v in pourcentages_filtr√©s.items()}
            total = sum(perturb√©s.values())
            if total == 0:
                continue
            normalis√©s = {p: v / total * 100 for p, v in perturb√©s.items()}
            df = appliquer_cifra_par_district(normalis√©s, DISTRIBUTION_DEPUTES)
            if not df.empty:
                resultats.append(df.set_index("Parti")["Si√®ges"])
        except Exception as e:
            print(f"Erreur : {e}")

    if not resultats:
        print("‚ùå Aucune simulation n‚Äôa pu √™tre effectu√©e.")
        return pd.DataFrame()

    df_resultats = pd.DataFrame(resultats).fillna(0)
    stats = df_resultats.describe(percentiles=[0.05, 0.5, 0.95]).T
    stats.rename(columns={"5%": "Si√®ges_min", "50%": "Si√®ges_med", "95%": "Si√®ges_max"}, inplace=True)
    stats = stats[["Si√®ges_min", "Si√®ges_med", "Si√®ges_max"]].astype(int)
    print("\n============== Simulation Monte Carlo (250 it√©rations) ==============")
    print(stats.to_string())
    return stats

#################################################################################################################################
# AFFICHE LES LIMITES DU GRAPHIQUE MONTE CARLO
#################################################################################################################################

def afficher_bornes_monte_carlo(stats: pd.DataFrame):
    stats = stats.sort_values("Si√®ges_med", ascending=True)
    fig, ax = plt.subplots(figsize=(10, 6))

    bars_max = ax.barh(stats.index, stats["Si√®ges_max"], color="#de4421", label="Max")
    bars_med = ax.barh(stats.index, stats["Si√®ges_med"], color="#f5e50c", label="M√©diane")
    bars_min = ax.barh(stats.index, stats["Si√®ges_min"], color="#bbf50c", label="Min")

    # Ajouter les √©tiquettes au bout des barres
    for bars, colonne in zip([bars_max, bars_med, bars_min], ["Si√®ges_max", "Si√®ges_med", "Si√®ges_min"]):
        for bar in bars:
            largeur = bar.get_width()
            ax.text(largeur + 1, bar.get_y() + bar.get_height() / 2,
                    f"{int(largeur)}", va='center', fontsize=9)

    ax.set_xlabel("Nombre de si√®ges")
    # Ajouter la date et heure en haut √† droite
    now = datetime.now().strftime("%d/%m/%Y, %H:%M")
    fig.text(0.985, 0.98, f"{now}", fontsize=10, color='gray', ha='right', va='top')
    
    # Ajouter la mention de copyright en bas √† gauche
    fig.text(0.66, 0.01, "¬© Matthieu Dangeville @matthieu_d0", fontsize=12, color='gray', ha='left', va='bottom')
    
    ax.set_title("Incertitude des projections (250 simulations)", fontsize=14, fontweight="bold")
    ax.legend()
    plt.tight_layout()

    chemin = r"C:\Matthieu\Documents\montecarlo_barres.png"
    plt.savefig(chemin, dpi=300)
    plt.close()

    if os.path.exists(chemin):
        os.startfile(chemin)

#################################################################################################################################
# FONCTION CIFRA REPARTIDORA PAR DISTRICT
#################################################################################################################################

def appliquer_cifra_par_district(
    pourcentages: Dict[str, float],
    distribution: Dict[str, int],
    perturbations: Dict[str, Dict[str, float]] = None  # üîπ param√®tre optionnel
) -> pd.DataFrame:
    result_total = pd.DataFrame(columns=["Parti", "Si√®ges"])

    for district, nb_sieges in distribution.items():
        # üî∏ Si une perturbation a √©t√© fournie pour ce district, on l‚Äôutilise
        if perturbations and district in perturbations:
            perturbation = perturbations[district]
        else:
            # üî∏ Sinon, on en g√©n√®re une nouvelle (par d√©faut, pour compatibilit√©)
            perturbation = {p: max(0, v + random.uniform(-2, 2)) for p, v in pourcentages.items()}

        df = pd.DataFrame(perturbation.items(), columns=["Parti", "Pourcentage"])
        total_valid = df["Pourcentage"].sum()
        df["Votes"] = df["Pourcentage"] / total_valid * 1_000_000

        quotients = []
        for idx, row in df.iterrows():
            for i in range(1, nb_sieges + 1):
                quotients.append({
                    "Parti": row["Parti"],
                    "Quotient": row["Votes"] / i
                })

        top = sorted(quotients, key=lambda x: x["Quotient"], reverse=True)[:nb_sieges]
        repartition = pd.DataFrame(top).groupby("Parti").size().reset_index(name="Si√®ges")
        result_total = pd.concat([result_total, repartition], ignore_index=True)

    return result_total.groupby("Parti").sum().reset_index().sort_values("Si√®ges", ascending=False)

#################################################################################################################################
# S√âNAT : MAJORITAIRE (1/r√©gion sauf Lima) + LIMA √† la proportionnelle + NATIONAL √† la proportionnelle
#################################################################################################################################

def simulateur_senat(pourcentages_nationaux: Dict[str, float], pourcentages_filtr√©s: Dict[str, float]) -> pd.DataFrame:
        # Majoritaire : sans filtrage
    regions_maj = [r for r in DISTRIBUTION_DEPUTES if r != "Lima Metropolitana"]
    majoritaire_result = []
    
    for region in regions_maj[:NB_SENATEURS_MAJ]:
        # Perturbation locale des pourcentages (simulation d‚Äôun vote r√©gional)
        perturbation = {p: max(0, v + random.uniform(-2, 2)) for p, v in pourcentages_nationaux.items()}
        total = sum(perturbation.values())
        if total == 0:
            continue
        local_votes = {p: (v / total) * 1_000_000 for p, v in perturbation.items()}
        gagnant = max(local_votes.items(), key=lambda x: x[1])[0]
        majoritaire_result.append(gagnant)

    # Compilation des vainqueurs majoritaires
    df_majoritaire = pd.DataFrame(Counter(majoritaire_result).items(), columns=["Parti", "Si√®ges_majoritaire"])

    # ‚úÖ Dictionnaire des vainqueurs par r√©gion (pour carte)
    region_senateurs = {}
    for i, region in enumerate(regions_maj[:NB_SENATEURS_MAJ]):
        if i < len(majoritaire_result):
            region_senateurs[region] = majoritaire_result[i]


    # Proportionnelle : avec filtrage
    df_lima = appliquer_cifra_par_district(pourcentages_filtr√©s, {"Lima Metropolitana": NB_SENATEURS_LIMA})
    df_lima.rename(columns={"Si√®ges": "Si√®ges_Lima"}, inplace=True)

    df_national = appliquer_cifra_par_district(pourcentages_filtr√©s, {"National": NB_SENATEURS_NATIONAL})
    df_national.rename(columns={"Si√®ges": "Si√®ges_National"}, inplace=True)

    # Fusion des trois
    df = pd.merge(df_majoritaire, df_lima, on="Parti", how="outer")
    df = pd.merge(df, df_national, on="Parti", how="outer").fillna(0)
    df["Total_S√©nat"] = df["Si√®ges_majoritaire"] + df["Si√®ges_National"] + df["Si√®ges_Lima"]    
    df["Total_S√©nat"] = df["Total_S√©nat"].astype(int)
    
    # ‚ö†Ô∏è Appliquer le double seuil : 5 % des voix (d√©j√† fait) + au moins 3 si√®ges au total au S√©nat
    df = df[df["Total_S√©nat"] >= 3]

    # On r√©cup√®re les vainqueurs sp√©cifiques
    vainqueur_exteriores = None
    if "Exteriores" in DISTRIBUTION_DEPUTES:
        perturbation_ext = {p: max(0, v + random.uniform(-2, 2)) for p, v in pourcentages_nationaux.items()}
        total_ext = sum(perturbation_ext.values())
        if total_ext > 0:
            local_votes_ext = {p: (v / total_ext) * 1_000_000 for p, v in perturbation_ext.items()}
            vainqueur_exteriores = max(local_votes_ext.items(), key=lambda x: x[1])[0]
            region_senateurs["Exteriores"] = vainqueur_exteriores
    
    # Pour Lima Metropolitana (4 si√®ges √† la proportionnelle)
    if not df_lima.empty:
        vainqueur_lima = df_lima.sort_values("Si√®ges_Lima", ascending=False).iloc[0]["Parti"]
        region_senateurs["Lima Metropolitana"] = vainqueur_lima
    else:
        print("‚ùå Aucune donn√©e valide pour Lima Metropolitana")

    return df.sort_values("Total_S√©nat", ascending=False), region_senateurs

#################################################################################################################################
# CARTE DE L'ELECTION DU SENAT - PARTIE MAJORITAIRE
#################################################################################################################################

def generer_carte_senateurs_majoritaires(gagnants_region: Dict[str, str], fichier_sortie: str):
    gdf = gpd.read_file("PER_adm1.shp")
    gdf["region_nom"] = gdf["NAME_1"]
    mapping_noms = {
        "Lima": "Lima Metropolitana",
        "El Callao": "Callao",
        "La Libertad": "La Libertad",
        "San Mart√≠n": "San Martin",
        "Lima Province": "Lima Provincias"
    }
    gdf["region_match"] = gdf["region_nom"].replace(mapping_noms)
    gdf["centroid"] = gdf.geometry.centroid

    couleurs = {
        "Per√∫ Libre": "#d4120f",
        "Fuerza Popular": "#e67710",
        "Acci√≥n Popular": "#000000",
        "Alianza para el Progreso": "#1b49b5",
        "Renovaci√≥n Popular": "#49b9de",
        "Avanza Pais": "#d62b95",
        "PPC": "#42a912",
        "PNP": "#e75b42",
        "Juntos por el Per√∫": "#3fd62b",
        "FA": "#336c0c",
        "Somos Per√∫": "#2b42d6",
        "Podemos Per√∫": "#dba321",
        "Partido Morado": "#bf21db",
        "APRA": "#e8e11e",
        "Victoria Nacional": "#ec3710",
        "Frepap": "#102a9f",
        "Uni√≥n por el Per√∫": "#e12d21"
    }

    geometries = []
    couleurs_points = []
    partis_points = []

    for _, row in gdf.iterrows():
        region = row["region_match"]
    
        if region == "Lima Metropolitana":
            print("")
        else:
            if region in gagnants_region:
                centroid = row["centroid"]
                parti = gagnants_region[region]
                if abs(centroid.x - (-76.30)) < 0.01 and abs(centroid.y - (-12.02)) < 0.01:
                    print("")
    
                geometries.append(centroid)
                couleurs_points.append(couleurs.get(parti, "#808080"))
                partis_points.append(parti)

        # --- Exteriores (1 si√®ge fictif en haut gauche) ---
    if "Exteriores" in gagnants_region:
        geometries.append(Point(-80, -2.5))
        couleurs_points.append(couleurs.get(gagnants_region["Exteriores"], "#808080"))
        partis_points.append(gagnants_region["Exteriores"])

    if "Lima Metropolitana" in gagnants_region:
        parti_lima = gagnants_region["Lima Metropolitana"]
        
    if "Lima Provincias" in gagnants_region:
        print("")

    # --- Lima Metropolitana (4 si√®ges proportionnels) ---
    lima_row = gdf[gdf["region_match"] == "Lima Metropolitana"]
    if not lima_row.empty:
        if "Lima Metropolitana" in gagnants_region:
            parti_lima = gagnants_region["Lima Metropolitana"]
            couleur_lima = couleurs.get(parti_lima, "#808080")
            lima_centroid = lima_row.iloc[0]["centroid"]  # ‚úÖ cette ligne √©tait manquante !
            for i in range(4):
                x = lima_centroid.x - 3 + i * 0.6
                y = lima_centroid.y - 0.3
                geometries.append(Point(x, y))
                couleurs_points.append(couleur_lima)
                partis_points.append(parti_lima)
    
    # --- Lima Provincias (1 si√®ge majoritaire) ---
    if "Lima Provincias" in gagnants_region:
        prov_row = gdf[gdf["region_match"] == "Lima Provincias"]
        if not prov_row.empty:
            centroid = prov_row.iloc[0]["centroid"]
            centroid = Point(centroid.x + 0.6, centroid.y + 0)
            geometries.append(centroid)
            couleur_prov = couleurs.get(gagnants_region["Lima Provincias"], "#808080")
            couleurs_points.append(couleur_prov)
            partis_points.append(gagnants_region["Lima Provincias"])


    df_points = gpd.GeoDataFrame(geometry=geometries)
    df_points["Couleur"] = couleurs_points
    df_points["Parti"] = partis_points

        # üî¥ Suppression du point parasite (valeurs √† adapter si besoin)
    coord_x_suspecte = -76.90
    coord_y_suspecte = -12.02
    print("Point suspect supprim√©. Chargement Monte Carlo ...")
    tol√©rance = 0.01  # tol√©rance autour des coordonn√©es (peut √™tre ajust√©e)
    
    # Cr√©ation d‚Äôun masque pour d√©tecter le point suspect
    masque_valide = ~df_points.geometry.apply(
        lambda p: abs(p.x - coord_x_suspecte) < tol√©rance and abs(p.y - coord_y_suspecte) < tol√©rance
    )
    
    # Filtrage des points
    df_points = df_points[masque_valide].reset_index(drop=True)
    partis_points = df_points["Parti"].tolist()
    couleurs_points = df_points["Couleur"].tolist()

    fig, ax = plt.subplots(figsize=(12, 12))
    gdf.boundary.plot(ax=ax, linewidth=0.8, color="black")
    df_points.plot(ax=ax, color=df_points["Couleur"], markersize=200)
    
    # Calculer le nombre de points (donc s√©nateurs) par parti
    compteur_senateurs = Counter(partis_points)
    
    # Construire une nouvelle l√©gende avec le total de si√®ges
    legendes = [
        Patch(color=couleurs.get(p, "#808080"), label=f"{p} ({compteur_senateurs.get(p, 0)})")
        for p in sorted(compteur_senateurs.keys(), key=lambda x: -compteur_senateurs[x])
    ]
    
    plt.legend(handles=legendes, loc="lower left", fontsize=9, title="S√©nateurs √©lus")
    # Ajouter la date et heure en haut √† droite
    now = datetime.now().strftime("%d/%m/%Y, %H:%M")
    fig.text(0.985, 0.98, f"{now}", fontsize=10, color='gray', ha='right', va='top')
    
    # Ajouter la mention de copyright en bas √† gauche
    fig.text(0.65, 0.01, "¬© Matthieu Dangeville @matthieu_d0", fontsize=15, color='gray', ha='left', va='bottom')
    
    plt.title("S√©nat par circonscription majoritaire sauf Lima proportionnelle (30)", fontsize=14, fontweight="bold")
    plt.axis("off")
    plt.tight_layout()
    
    if os.path.exists(fichier_sortie):
        os.remove(fichier_sortie)  # Supprime l'image pr√©c√©dente    
    plt.savefig(fichier_sortie, dpi=300)
    plt.close()

    if os.path.exists(fichier_sortie):
        try:
            os.startfile(fichier_sortie)
        except AttributeError:
            import subprocess
            subprocess.run(["open", fichier_sortie])  # pour macOS


#################################################################################################################################
# COMPARE LE RESULTAT DES DEPUTES AVEC 2021
#################################################################################################################################

def comparer_resultats(simules_df: pd.DataFrame, historiques: Dict[str, int]):
    comparatif = []
    simules_dict = dict(zip(simules_df["Parti"], simules_df["Si√®ges"]))
    for parti in set(historiques) | set(simules_dict):
        s2021 = historiques.get(parti, 0)
        s_sim = simules_dict.get(parti, 0)
        difference = s_sim - s2021
        comparatif.append((parti, s2021, s_sim, difference))
    return sorted(comparatif, key=lambda x: x[2], reverse=True)

#################################################################################################################################
# SIMULATION 1ER TOUR ELECTION PRESIDENTIELLE
#################################################################################################################################

def simuler_premier_tour(pourcentages: Dict[str, float]):
    valides = {p: v for p, v in pourcentages.items() if v > 0}
    total = sum(valides.values())
    normalis√©s = {p: v / total * 100 for p, v in valides.items()}
    classement = sorted(normalis√©s.items(), key=lambda x: x[1], reverse=True)
    return classement[:2], normalis√©s  # Renvoie les deux finalistes

#################################################################################################################################
# SIMULATION 2E TOUR ELECTION PRESIDENTIELLE
#################################################################################################################################

def simuler_second_tour(finalistes: Tuple[str, str], pourcentages: Dict[str, float]):
    cand1, cand2 = finalistes
    autres = [p for p in pourcentages if p not in finalistes]

    # Hypoth√®se simple : r√©partition √©quitable des reports
    reports_cand1 = sum(pourcentages[a] * 0.5 for a in autres)
    reports_cand2 = sum(pourcentages[a] * 0.5 for a in autres)

    score1 = pourcentages[cand1] + reports_cand1
    score2 = pourcentages[cand2] + reports_cand2

    total = score1 + score2
    pct1 = score1 / total * 100
    pct2 = score2 / total * 100

    return {
        cand1: round(pct1, 2),
        cand2: round(pct2, 2),
        "gagnant": cand1 if pct1 > pct2 else cand2
    }

#################################################################################################################################
# LANCER LA SIMULATION DE L'ELECTION PRESIDENTIELLE
#################################################################################################################################

def simuler_election_presidentielle(pourcentages: Dict[str, float]):
    print("============== üó≥Ô∏è √âLECTION PR√âSIDENTIELLE ==============")

    # üîπ Perturbation al√©atoire de ¬±3 % directement ici
    perturb√©s = {p: max(0, v + random.uniform(-3, 3)) for p, v in pourcentages.items()}
    total = sum(perturb√©s.values())
    perturb√©s = {p: v / total * 100 for p, v in perturb√©s.items()}  # normalisation √† 100 %

    # üîπ Premier tour avec scores perturb√©s
    finalistes, normalis√©s = simuler_premier_tour(perturb√©s)

    print("\nüìä R√©sultats du 1er tour :")
    classement_complet = sorted(normalis√©s.items(), key=lambda x: x[1], reverse=True)
    for parti, pct in classement_complet:
        print(f" - {parti} : {pct:.2f} %")

    second_tour = simuler_second_tour((finalistes[0][0], finalistes[1][0]), normalis√©s)

    print("\n‚öîÔ∏è  Second tour :")
    print(f"{finalistes[0][0]} : {second_tour[finalistes[0][0]]:.2f}%")
    print(f"{finalistes[1][0]} : {second_tour[finalistes[1][0]]:.2f}%")
    print(f"\nüèÜ Gagnant : {second_tour['gagnant']}")

#################################################################################################################################
# GENERE UN GRAPHIQUE A BARRES DES SENATEURS ELUS - PARTIE PROPORTIONNELLE
#################################################################################################################################

def graphique_senat_proportionnel(df_senat, chemin_image="C:/Matthieu/Documents/senat_proportionnel_barres.png"):
    import matplotlib.pyplot as plt

    couleurs = {
        "Per√∫ Libre": "#d4120f",
        "Fuerza Popular": "#e67710",
        "Acci√≥n Popular": "#000000",
        "Alianza para el Progreso": "#1b49b5",
        "Renovaci√≥n Popular": "#49b9de",
        "Avanza Pais": "#d62b95",
        "PPC": "#42a912",
        "PNP": "#e75b42",
        "Juntos por el Per√∫": "#3fd62b",
        "FA": "#336c0c",
        "Somos Per√∫": "#2b42d6",
        "Podemos Per√∫": "#dba321",
        "Partido Morado": "#bf21db",
        "APRA": "#e8e11e",
        "Victoria Nacional": "#ec3710",
        "Frepap": "#102a9f",
        "Uni√≥n por el Per√∫": "#e12d21"
    }
    # Extraire uniquement les colonnes proportionnelles
    df = df_senat.copy()
    df["Si√®ges_Prop"] = df["Si√®ges_National"]
    df = df[df["Si√®ges_Prop"] > 0].sort_values("Si√®ges_Prop", ascending=True)

    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.barh(df["Parti"], df["Si√®ges_Prop"], color=[couleurs.get(p, "#808080") for p in df["Parti"]])

    # Ajouter les √©tiquettes de valeur
    for bar in bars:
        width = bar.get_width()
        ax.text(width + 0.3, bar.get_y() + bar.get_height()/2, f"{int(width)}", va='center', fontsize=10)

    ax.set_title("S√©nat ‚Äì Proportionnelle nationale (30)", fontsize=14, fontweight="bold")
    ax.set_xlabel("Nombre de si√®ges")
    
    # Ajouter la date et heure en haut √† droite
    now = datetime.now().strftime("%d/%m/%Y, %H:%M")
    fig.text(0.985, 0.98, f"{now}", fontsize=10, color='gray', ha='right', va='top')
    
    # Ajouter la mention de copyright en bas √† gauche
    fig.text(0.65, 0.01, "¬© Matthieu Dangeville @matthieu_d0", fontsize=12, color='gray', ha='left', va='bottom')
    
    plt.tight_layout()
    plt.savefig(chemin_image, dpi=300)
    plt.close()

    if os.path.exists(chemin_image):
        try:
            os.startfile(chemin_image)
        except AttributeError:
            import subprocess
            subprocess.run(["open", chemin_image])

#################################################################################################################################
# VISUALISATION : DEMI-CERCLE DES D√âPUT√âS
#################################################################################################################################

def generate_double_half_circle(df_deputes, df_senat):


# Couleurs par parti
    couleurs = {
        "Per√∫ Libre": "#d4120f",
        "Fuerza Popular": "#e67710",
        "Acci√≥n Popular": "#000000",
        "Alianza para el Progreso": "#1b49b5",
        "Renovaci√≥n Popular": "#49b9de",
        "Avanza Pais": "#d62b95",
        "PPC": "#42a912",
        "PNP": "#e75b42",
        "Juntos por el Per√∫": "#3fd62b",
        "FA": "#336c0c",
        "Somos Per√∫": "#2b42d6",
        "Podemos Per√∫": "#dba321",
        "Partido Morado": "#bf21db",
        "APRA": "#e8e11e",
        "Victoria Nacional": "#ec3710",
        "Frepap": "#102a9f",
        "Uni√≥n por el Per√∫": "#e12d21"
    }



    # Ordre id√©ologique
    ordre_politique = [
        "Renovaci√≥n Popular",
        "Fuerza Popular",
        "Avanza Pais",
        "APRA",
        "PPC",
        "Podemos Per√∫",
        "Alianza para el Progreso",
        "Frepap",
        "Acci√≥n Popular",
        "Partido Morado",
        "Somos Per√∫",
        "FA",
        "Victoria Nacional",
        "Uni√≥n por el Per√∫",
        "Juntos por el Per√∫",
        "PNP",
        "Per√∫ Libre"
    ]

#################################################################################################################################
# TRACE LES HEMICYCLES
#################################################################################################################################

    def tracer_hemicycle(ax, df, titre):
        df = df[df["Si√®ges"] > 0].copy()
        df["ordre"] = df["Parti"].apply(lambda p: ordre_politique.index(p) if p in ordre_politique else 999)
        df = df.sort_values("ordre").drop(columns="ordre")
    
        total = df["Si√®ges"].sum()
        angles = df["Si√®ges"] / total * 180
    
        start_angle = 0
        handles = []
        labels = []
    
        for row, angle in zip(df.itertuples(index=False), angles):
            theta = np.linspace(np.radians(start_angle), np.radians(start_angle + angle), 100)
            x = np.append([0], np.cos(theta))
            y = np.append([0], np.sin(theta))
            couleur = couleurs.get(row.Parti, "#808080")
            if couleur == "#808080":
                print(f"‚ö†Ô∏è ATTENTION : Parti inconnu d√©tect√© : {row.Parti} ‚ö†Ô∏è")
    
            patch = ax.fill(x, y, color=couleur, label=f"{row.Parti} ({row.Si√®ges})")
            handles += patch
            labels.append(f"{row.Parti} ({row.Si√®ges})")
            start_angle += angle
    
    
        ax.set_aspect('equal')
        ax.axis('off')
        ax.set_title(titre, fontsize=25, fontweight='bold', pad=25)
        return handles, labels
    
    # Pr√©paration
    df_dep = df_deputes.rename(columns={"Si√®ges": "Si√®ges"})
    # df_sen = df_senat.rename(columns={"Total_S√©nat": "Si√®ges"})
    
        # R√©cup√©ration des colonnes n√©cessaires pour l‚Äôh√©micycle
    df_sen = df_senat.copy()
    
    df_sen = df_sen[["Parti", "Si√®ges"]]  # C'est CE dataframe qu'il faut passer
    
    
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(15, 11))
    
    # Tracer S√©nat et D√©put√©s avec l√©gendes
    handles_sen, labels_sen = tracer_hemicycle(ax1, df_sen, "Senado (60 esca√±os)")
    handles_dep, labels_dep = tracer_hemicycle(ax2, df_dep, "Camara de Diputados (130 esca√±os)")
    
    # L√©gendes distinctes
    ax1.legend(handles_sen, labels_sen, loc='center left', bbox_to_anchor=(1, 0.4), fontsize=15)
    ax2.legend(handles_dep, labels_dep, loc='center left', bbox_to_anchor=(1, 0.8), fontsize=15)
    
    # Ajouter la date et heure en haut √† droite
    now = datetime.now().strftime("%d/%m/%Y, %H:%M")
    fig.text(0.985, 0.98, f"{now}", fontsize=10, color='gray', ha='right', va='top')
    
    # Ajouter la mention de copyright en bas √† gauche
    fig.text(0.73, 0.01, "¬© Matthieu Dangeville @matthieu_d0", fontsize=15, color='gray', ha='left', va='bottom')
    
    # === Nouvelle l√©gende : √âcarts par rapport √† 2021 ===
    df_dep_dict = dict(zip(df_dep["Parti"], df_dep["Si√®ges"]))
    liste_ecarts = []
    for parti in df_dep_dict:
        anciens = resultats_2021.get(parti, 0)
        nouveaux = df_dep_dict[parti]
        ecart = nouveaux - anciens
        signe = "+" if ecart > 0 else ""
        texte = f"{parti}: {signe}{ecart}"
        liste_ecarts.append(texte)
    
    # Affichage sous la l√©gende des d√©put√©s (ajustement possible)
    ax2.text(1.05, 0.4, "√âcart par rapport √† 2021 :", fontsize=14, fontweight='bold', transform=ax2.transAxes)
    for i, texte in enumerate(liste_ecarts):
        ax2.text(1.05, 0.35 - i*0.05, texte, fontsize=13, transform=ax2.transAxes)
    
    
    plt.tight_layout(h_pad=2.5)
    
    chemin_image = r"C:\Matthieu\Documents\double_hemicycle.png"
    plt.savefig(chemin_image, dpi=300)
    plt.close()
    
    if os.path.exists(chemin_image):
        try:
            os.startfile(chemin_image)
        except AttributeError:
            subprocess.run(["open", chemin_image])
    else:
        print("\n‚ùå L‚Äôimage n‚Äôa pas √©t√© enregistr√©e.")
        print()


resultats_2021 = {
    "Per√∫ Libre": 37,
    "Fuerza Popular": 24,
    "Renovaci√≥n Popular": 13,
    "Acci√≥n Popular": 16,
    "Alianza para el Progreso": 15,
    "Avanza Pais": 7,
    "Juntos por el Per√∫": 5,
    "Somos Per√∫": 5,
    "Podemos Per√∫": 5,
    "Partido Morado": 3
}

#################################################################################################################################
# GENERE UN FICHIER WORD
#################################################################################################################################

def generer_rapport_word(chemin_dossier: str, texte_console: str,
                         image_hemicycle_path: str,
                         image_montecarlo_path: str,
                         image_carte_path: str,
                         df_deputes: pd.DataFrame,
                         df_senat: pd.DataFrame,
                         stats_monte_carlo: pd.DataFrame,
                         nom_fichier: str = "Rapport_simulation_python_Peru.docx"):


    # Cr√©er un document Word
    doc = Document()
    
    sections = doc.sections
    for section in sections:
        section.top_margin = Inches(0.4)     # marge sup√©rieure r√©duite √† 0.5 pouces
        section.bottom_margin = Inches(0.3)  # marge inf√©rieure r√©duite √† 0.5 pouces

    
    doc.add_heading("Rapport de simulation √©lectorale ‚Äì P√©rou", 0)
    doc.add_paragraph(f"Date de g√©n√©ration : {datetime.now().strftime('%d/%m/%Y √† %H:%M')}. Fait par Matthieu Dangeville.")
    doc.add_paragraph("Conforme √† la Ley Org√°nica de Elecciones (LOE) de la R√©publique du P√©rou.")
    
    intro = (
        "Ce rapport pr√©sente les r√©sultats d‚Äôune simulation √©lectorale compl√®te r√©alis√©e √† l‚Äôaide d‚Äôun simulateur Python con√ßu conform√©ment aux principes et exigences de la Ley Org√°nica de Elecciones (LOE) du P√©rou.\n\n"
        "Le programme mod√©lise de mani√®re rigoureuse l‚Äôallocation des si√®ges au Congr√®s p√©ruvien, compos√© de la Chambre des d√©put√©s (130 membres) et d‚Äôun S√©nat r√©instaur√© dans sa forme bicam√©rale (60 membres), tel que pr√©vu dans les r√©formes institutionnelles en discussion.\n\n" 
        "La r√©partition des 130 d√©put√©s par district respecte l'article 21 de la LOE, fond√© sur la population √©lectorale recens√©e. Chaque d√©partement, ainsi que la circonscription des √©lecteurs r√©sidant √† l‚Äô√©tranger, se voit attribuer un nombre fixe de si√®ges, comme √©tabli dans la loi √©lectorale. \n\n"
        "L‚Äôattribution des si√®ges au sein de chaque circonscription repose sur la m√©thode de la plus forte moyenne (m√©thode de D‚ÄôHondt), conform√©ment √† l‚Äôarticle 20 de la LOE, en tenant compte d‚Äôun seuil √©lectoral national de 5% des votes valides (article 13-A).\n\n"
        "Pour la composition du S√©nat, le programme simule un syst√®me mixte (moiti√© majoritaire, moiti√© proportionnel) : 26 s√©nateurs sont √©lus selon un scrutin uninominal majoritaire par circonscription (√† raison d‚Äôun s√©nateur par d√©partement), tandis que les 34 autres sont √©lus √† la proportionnelle sur deux circonscriptions : Lima m√©tropolitaine (4 si√®ges) et la liste nationale (30 si√®ges).\n\n"
        "Ce simulateur int√®gre √©galement une mod√©lisation des incertitudes par m√©thode Monte Carlo, qui permet d‚Äô√©valuer la robustesse des projections √† partir d‚Äôintentions de vote sujettes √† variation.\n\n"
        "Une s√©rie de 100 √† 1000 it√©rations introduit une perturbation al√©atoire autour des intentions exprim√©es, simulant l‚Äôeffet des marges d‚Äôerreur, des ind√©cis ou des transferts d‚Äô√©lecteurs.\n"
        )
    doc.add_paragraph(intro)


    doc.add_heading("R√©partition des d√©put√©s", level=2)
    table_dep = doc.add_table(rows=1, cols=2)
    table_dep.style = 'Table Grid'
    hdr_cells = table_dep.rows[0].cells
    hdr_cells[0].text = 'Parti'
    hdr_cells[1].text = 'Si√®ges'
    
    for _, row in df_deputes.iterrows():
        row_cells = table_dep.add_row().cells
        row_cells[0].text = row['Parti']
        row_cells[1].text = str(row['Si√®ges'])


    doc.add_heading("2. R√©partition au Parlement", level=1)
    doc.add_picture(image_hemicycle_path, width=Inches(6.5))


    doc.add_heading("R√©partition au S√©nat", level=2)
    table_sen = doc.add_table(rows=1, cols=2)
    table_sen.style = 'Table Grid'
    hdr_cells = table_sen.rows[0].cells
    hdr_cells[0].text = 'Parti'
    hdr_cells[1].text = 'Total S√©nat'
    
    for _, row in df_senat.iterrows():
        row_cells = table_sen.add_row().cells
        row_cells[0].text = row['Parti']
        row_cells[1].text = str(row['Total_S√©nat'])
        
    doc.add_heading("Simulation Monte Carlo", level=2)
    table_mc = doc.add_table(rows=1, cols=4)
    table_mc.style = 'Table Grid'
    hdr_cells = table_mc.rows[0].cells
    hdr_cells[0].text = 'Parti'
    hdr_cells[1].text = 'Si√®ges min'
    hdr_cells[2].text = 'Si√®ges m√©dian'
    hdr_cells[3].text = 'Si√®ges max'

    for parti, row in stats_monte_carlo.iterrows():
        row_cells = table_mc.add_row().cells
        row_cells[0].text = parti
        row_cells[1].text = str(row['Si√®ges_min'])
        row_cells[2].text = str(row['Si√®ges_med'])
        row_cells[3].text = str(row['Si√®ges_max'])

    doc.add_heading("3. Incertitudes Monte Carlo", level=1)
    doc.add_picture(image_montecarlo_path, width=Inches(6.5))

    doc.add_heading("4. Carte des partis dominants par d√©partement", level=1)
    doc.add_picture(image_carte_path, width=Inches(6.5))

    doc.add_heading("5. Carte des s√©nateurs √©lus par r√©gion (majoritaire + Lima)", level=1)
    doc.add_picture("C:/Matthieu/Documents/carte_senateurs.png", width=Inches(6.5))

    doc.add_heading("6. R√©partition proportionnelle au S√©nat", level=1)
    doc.add_picture("C:/Matthieu/Documents/senat_proportionnel_barres.png", width=Inches(6.5))

    chemin_final = os.path.join(chemin_dossier, nom_fichier)
    doc.save(chemin_final)
    print("\n‚úÖ Rapport Word enregistr√©. \n FIN DU PROGRAMME.")

#################################################################################################################################
# ENREGISTRE LES RESULTATS DE CHAQUE SIMULATION DANS UNE LIGNE EXCEL !
#################################################################################################################################

def enregistrer_resultats_excel(df_deputes, df_senat, stats_monte_carlo, fichier_excel="C:/Matthieu/Documents/Rapports_des_tests.xlsx"):
    
    date_simulation = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    # Cr√©ation d‚Äôun DataFrame consolid√©
    df_deputes = df_deputes.set_index("Parti").rename(columns={"Si√®ges": "D√©put√©s"})
    df_senat = df_senat.set_index("Parti").rename(columns={"Total_S√©nat": "S√©nateurs"})[["S√©nateurs"]]
    stats_monte_carlo = stats_monte_carlo.rename(columns={
        "Si√®ges_min": "MC_min",
        "Si√®ges_med": "MC_med",
        "Si√®ges_max": "MC_max"
    })

    df_fusion = df_deputes.join(df_senat, how="outer").join(stats_monte_carlo, how="outer").fillna(0).astype(int)
    df_fusion.insert(0, "Date", date_simulation)

    # Ajout au fichier Excel
    if os.path.exists(fichier_excel):
        wb = load_workbook(fichier_excel)
        if "Simulations" not in wb.sheetnames:
            ws = wb.create_sheet("Simulations")
        else:
            ws = wb["Simulations"]
    else:
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "Simulations"

    # Si le fichier est vide, √©crire l‚Äôen-t√™te
    if ws.max_row == 1 and ws.max_column == 1 and ws["A1"].value is None:
        ws.append(["Date", "Parti", "D√©put√©s", "S√©nateurs", "MC_min", "MC_med", "MC_max"])

    for parti, row in df_fusion.iterrows():
        ws.append([
            row["Date"],
            parti,
            row.get("D√©put√©s", 0),
            row.get("S√©nateurs", 0),
            row.get("MC_min", 0),
            row.get("MC_med", 0),
            row.get("MC_max", 0)
        ])
    # ‚ûï Ajouter une ligne de s√©paration visuelle
    ws.append(["---- FIN SIMULATION ----", "", "", "", "", "", ""])
    wb.save(fichier_excel)
    print(f"‚úÖ R√©sultats enregistr√©s dans {fichier_excel}")


#################################################################################################################################
# GENERE UNE CARTE DES DEPUTES ELUS
#################################################################################################################################

def generer_carte_par_sieges(resultats_par_region: Dict[str, Dict[str, int]], fichier_sortie: str):

    offsets_regionaux = {
    "Lima Metropolitana": (-0, 0),
    "Callao": (-0.3, 0),           # l√©g√®rement √† gauche
    "Lima Provincias": (0.6, 0.1),   # un peu plus √† droite
}
    partis_points = []  # ‚Üê Nouveau

    couleurs = {
        "Per√∫ Libre": "#d4120f",
        "Fuerza Popular": "#e67710",
        "Acci√≥n Popular": "#000000",
        "Alianza para el Progreso": "#1b49b5",
        "Renovaci√≥n Popular": "#49b9de",
        "Avanza Pais": "#d62b95",
        "PPC": "#42a912",
        "PNP": "#e75b42",
        "Juntos por el Per√∫": "#3fd62b",
        "FA": "#336c0c",
        "Somos Per√∫": "#2b42d6",
        "Podemos Per√∫": "#dba321",
        "Partido Morado": "#bf21db",
        "APRA": "#e8e11e",
        "Victoria Nacional": "#ec3710",
        "Frepap": "#102a9f",
        "Uni√≥n por el Per√∫": "#e12d21"
    }

    gdf = gpd.read_file("PER_adm1.shp")
    gdf["region_nom"] = gdf["NAME_1"]
    mapping_noms = {
        "Lima": "Lima Metropolitana",
        "El Callao": "Callao",
        "La Libertad": "La Libertad",
        "San Mart√≠n": "San Martin",
        "Lima Province": "Lima Provincias"
    }
    gdf["region_match"] = gdf["region_nom"].replace(mapping_noms)
    gdf["centroid"] = gdf.geometry.centroid

    geometries = []
    couleurs_points = []

    for _, row in gdf.iterrows():
        region = row["region_match"]
        centroid = row["centroid"]
        if region not in resultats_par_region:
            continue

        parti_seats = resultats_par_region[region]
        total_seats = sum(parti_seats.values())

        # Taille de la grille : carr√© le plus petit possible
        n_cols = math.ceil(math.sqrt(total_seats))
        n_rows = math.ceil(total_seats / n_cols)

        spacing = 0.3  # √©cart entre les points
        offset_x = -(n_cols - 1) / 2 * spacing
        offset_y = -(n_rows - 1) / 2 * spacing

        seat_index = 0
        for parti, count in parti_seats.items():
            for _ in range(count):
                row_idx = seat_index // n_cols
                col_idx = seat_index % n_cols
                dx, dy = offsets_regionaux.get(region, (0, 0))
                x = centroid.x + offset_x + col_idx * spacing + dx
                y = centroid.y + offset_y + row_idx * spacing + dy

                # D√©calage manuel pour Lima
                if region == "Lima Metropolitana":
                    x -= 2.5  # Ajuste cette valeur si n√©cessaire

                geometries.append(Point(x, y))
                couleurs_points.append(couleurs.get(parti, "#808080"))
                partis_points.append(parti)  # ‚Üê Nouveau
                seat_index += 1

            # === Ajout manuel de la circonscription "Exteriores" ===
        # Coordonn√©es fictives en haut √† gauche
        x_base, y_base = -80, -2.5  # Ajuste si n√©cessaire
        
        # D√©termine le nombre de si√®ges pour chaque parti "exteriores"
        sieges_exteriores = resultats_par_region.get("Exteriores", {})
        dx = 0.4  # espacement horizontal entre les cercles
        
        for i, (parti, n_sieges) in enumerate(sieges_exteriores.items()):
            for j in range(n_sieges):
                geometries.append(Point(x_base + j * dx + i * 1.2, y_base))
                couleurs_points.append(couleurs.get(parti, "#808080"))
                partis_points.append(parti)

    df_points = gpd.GeoDataFrame(geometry=geometries)
    df_points["Couleur"] = couleurs_points
    df_points["Parti"] = partis_points
    
    # ‚úÖ V√©rification des partis non color√©s (gris #808080)
    partis_non_repertories = set()
    for _, row in df_points.iterrows():
        if row["Couleur"] == "#808080":
            partis_non_repertories.add(row["Parti"])

    if partis_non_repertories:
        print("‚ö†Ô∏è Partis sans couleur d√©finie :")
        for p in partis_non_repertories:
            print(f" - {p}")

    fig, ax = plt.subplots(figsize=(12, 12))
    gdf.boundary.plot(ax=ax, linewidth=0.8, color="black")
    df_points.plot(ax=ax, color=df_points["Couleur"], markersize=90)

    plt.title("R√©partition des si√®ges par r√©gion (d√©put√©s)", fontsize=14, fontweight="bold")
    plt.axis("off")

    # Compter les si√®ges par parti
    # Reconstruire les vrais totaux depuis resultats_par_region
    sieges_totaux = Counter()
    for district, resultats in resultats_par_region.items():
        for parti, nb in resultats.items():
            sieges_totaux[parti] += nb

# Cr√©er la l√©gende avec le nombre de si√®ges
    legendes = [
    mpatches.Patch(color=c, label=f"{p} ({sieges_totaux.get(p, 0)})")
    for p, c in couleurs.items() if p in sieges_totaux
]

    # Ajouter la date et heure en haut √† droite
    now = datetime.now().strftime("%d/%m/%Y, %H:%M")
    fig.text(0.985, 0.98, f"{now}", fontsize=10, color='gray', ha='right', va='top')
    
    # Ajouter la mention de copyright en bas √† gauche
    fig.text(0.65, 0.01, "¬© Matthieu Dangeville @matthieu_d0", fontsize=15, color='gray', ha='left', va='bottom')
    
    
    plt.legend(handles=legendes, loc="lower left", fontsize=9, title="Partis")
    plt.tight_layout()
    plt.savefig(fichier_sortie, dpi=300)
    plt.close()

    print(f"‚úÖ Carte par si√®ge enregistr√©e : {fichier_sortie}")

    if os.path.exists(fichier_sortie):
        try:
            os.startfile(fichier_sortie)
        except AttributeError:
            import subprocess
            subprocess.run(["open", fichier_sortie])  # pour macOS

#################################################################################################################################
# PONDERATIONS
#################################################################################################################################

"""
# -------------------------------
# POND√âRATIONS MANUELLES GLOBALES
# -------------------------------
pond√©rations_personnelles = {
    "Per√∫ Libre": 1.15,
    "Fuerza Popular": 0.85,
    "Acci√≥n Popular": 0.95,
    "Alianza para el Progreso": 1.6,
    "Renovaci√≥n Popular": 0.8,
    "Avanza Pais": 0.75,
    "Juntos por el Per√∫": 1.05,
    "Somos Per√∫": 1.1,
    "Podemos Per√∫": 1.2,
    "Partido Morado": 1.1,
    "APRA": 1.0
}

# -------------------------------
# SIMULATION GLOBALE AVEC GRAPHIQUE
# -------------------------------


# === üîµ POND√âRATIONS MANUELLES ===
    pond√©rations_personnelles = {
    "Per√∫ Libre": 1.15,
    "Fuerza Popular": 0.85,
    "Acci√≥n Popular": 0.95,
    "Alianza para el Progreso": 1.6,
    "Renovaci√≥n Popular": 0.8,
    "Avanza Pais": 0.75,
    "Juntos por el Per√∫": 1.05,
    "Somos Per√∫": 1.1,
    "Podemos Per√∫": 1.2,
    "Partido Morado": 1.1,
    "APRA": 1.0
}


    
    # === üîµ Application pond√©rations manuelles sur les d√©put√©s ===
    deputes["Si√®ges"] = deputes.apply(
        lambda row: int(round(row["Si√®ges"] * pond√©rations_personnelles.get(row["Parti"], 1.0))), axis=1
)


    # === üîµ Application pond√©rations manuelles sur le S√©nat ===
    senat["Total_S√©nat"] = senat.apply(
        lambda row: int(round(row["Total_S√©nat"] * pond√©rations_personnelles.get(row["Parti"], 1.0))), axis=1
)
"""

#################################################################################################################################
# FUSIONNE LES RESULTATS DU SENAT SUR L'HEMICYCLE
#################################################################################################################################

"""
def fusionner_senat(senat_prop_df: pd.DataFrame, gagnants_majoritaires: Dict[str, str]) -> pd.DataFrame:
    
  #  Fusionne les r√©sultats proportionnels (df) et majoritaires (dict) pour affichage dans l‚Äôh√©micycle du S√©nat.
    
    total_majoritaire = Counter(gagnants_majoritaires.values())  # Ex: {"Fuerza Popular": 8, ...}
    total_proportionnel = dict(
        zip(
            senat_prop_df["Parti"],
            senat_prop_df.get("Si√®ges_National", pd.Series(0)) + senat_prop_df.get("Si√®ges_Lima", pd.Series(0))
        )
    )

    fusion = {}
    tous_partis = set(total_majoritaire) | set(total_proportionnel)
    for parti in tous_partis:
        fusion[parti] = total_majoritaire.get(parti, 0) + total_proportionnel.get(parti, 0)

    return pd.DataFrame({
        "Parti": list(fusion.keys()),
        "Si√®ges": list(fusion.values())
    }).sort_values("Si√®ges", ascending=False)
"""

#################################################################################################################################
# SIMULATION GENERALE
#################################################################################################################################

def simulation_globale(pourcentages: Dict[str, float]):
    # √âtape 1 : filtrage initial sur le seuil de 5 %
    candidats_5pourcent = {p: v for p, v in pourcentages.items() if v >= SEUIL_ELECTORAL}
 
    # === 1. G√©n√©rer les perturbations par district
    perturbations_par_district = {
        district: {p: max(0, v + random.uniform(-2, 2)) for p, v in pourcentages.items()}
        for district in DISTRIBUTION_DEPUTES
    }
    
    # === 2. R√©partir les si√®ges r√©gion par r√©gion (sans filtrer pour l‚Äôinstant)
    resultats_par_region = {}
    for district in DISTRIBUTION_DEPUTES:
        df_local = appliquer_cifra_par_district(
            pourcentages,
            {district: DISTRIBUTION_DEPUTES[district]},
            perturbations=perturbations_par_district
        )
        resultats_par_region[district] = dict(zip(df_local["Parti"], df_local["Si√®ges"]))
    
    # === 3. Agr√©ger tous les r√©sultats r√©gionaux
    totaux_deputes_depuis_carte = defaultdict(int)
    for region, resultats in resultats_par_region.items():
        for parti, nb_sieges in resultats.items():
            totaux_deputes_depuis_carte[parti] += nb_sieges
    
    # === 4. Cr√©er DataFrame des d√©put√©s
    deputes = pd.DataFrame({
        "Parti": list(totaux_deputes_depuis_carte.keys()),
        "Si√®ges": list(totaux_deputes_depuis_carte.values())
    })
    
    # === 5. Appliquer le double seuil LOE (Art. 13-A)
    candidats_5pourcent = {p: v for p, v in pourcentages.items() if v >= SEUIL_ELECTORAL}
    deputes = deputes[deputes["Parti"].isin(candidats_5pourcent.keys())]
    deputes = deputes[deputes["Si√®ges"] >= 7]
    
    # === 6. Cr√©er le dictionnaire filtr√© √† utiliser pour toutes les autres √©tapes
    partis_admis = set(deputes["Parti"])
    pourcentages_filtr√©s = {p: v for p, v in pourcentages.items() if p in partis_admis}
    

    # === 6. Redistribuer les si√®ges perdus (pour obtenir exactement 130 si√®ges) ===

    total_initial = sum(totaux_deputes_depuis_carte.values())
    total_filtr√© = deputes["Si√®ges"].sum()
    sieges_a_redistribuer = total_initial - total_filtr√©

    if sieges_a_redistribuer > 0:
        # Proportion des partis admissibles
        total_votes_valides = sum([pourcentages[p] for p in partis_admis])
        proportions = {p: pourcentages[p] / total_votes_valides for p in partis_admis}

        # Attribution proportionnelle des si√®ges perdus
        for p in deputes["Parti"]:
            seats_to_add = round(proportions[p] * sieges_a_redistribuer)
            deputes.loc[deputes["Parti"] == p, "Si√®ges"] += seats_to_add

        # Correction pour atteindre exactement 130 (ajustement d'arrondi)
        difference = 130 - deputes["Si√®ges"].sum()
        if difference != 0:
            top_parti = deputes.sort_values("Si√®ges", ascending=False).iloc[0]["Parti"]
            deputes.loc[deputes["Parti"] == top_parti, "Si√®ges"] += difference



    # === 7. R√©g√©n√©rer les r√©sultats r√©gionaux uniquement avec les partis admis
    resultats_par_region = {}
    for district in DISTRIBUTION_DEPUTES:
        df_local = appliquer_cifra_par_district(
            pourcentages_filtr√©s,
            {district: DISTRIBUTION_DEPUTES[district]},
            perturbations=perturbations_par_district
        )
        resultats_par_region[district] = dict(zip(df_local["Parti"], df_local["Si√®ges"]))


   # senat, _ = simulateur_senat(pourcentages, pourcentages_filtr√©s)

    senat, region_senateurs = simulateur_senat(pourcentages, pourcentages_filtr√©s)
    senat["Si√®ges"] = senat["Si√®ges_majoritaire"] + senat["Si√®ges_Lima"] + senat["Si√®ges_National"]
    senat_affiche = senat[["Parti", "Si√®ges"]].copy()
    print(senat_affiche.to_string(index=False))

    senat["Si√®ges"] = senat["Si√®ges"].astype(int)
    generate_double_half_circle(deputes, senat)

    # Appliquer le seuil √©lectoral national AVANT TOUT
    #pourcentages_filtr√©s = {p: v for p, v in pourcentages.items() if v >= SEUIL_ELECTORAL}
    
    print()
    print()
    print("============== Partis admis au Parlement (>= 5%) ==============")
    for parti, pct in sorted(pourcentages_filtr√©s.items(), key=lambda x: x[1], reverse=True):
        print(f"{parti}: {pct:.1f}%")
    
    print("\n============== R√©partition des D√©put√©s ==============")
   # deputes = appliquer_cifra_par_district(pourcentages_filtr√©s, DISTRIBUTION_DEPUTES)
    print(deputes.to_string(index=False))

    print("\n============== Comparaison avec le Congr√®s de 2021 ==============")
    comparaison = comparer_resultats(deputes, resultats_2021)
    print(f"{'Parti':<25}{'2021':>6}{'Simul√©':>8}{'√âcart':>7}")
    for parti, s2021, s_sim, ecart in comparaison:
        print(f"{parti:<25}{s2021:>6}{s_sim:>8}{ecart:>7}")

    print("\n============== R√©partition du S√©nat ==============")
    senat_affiche = senat[["Parti", "Si√®ges"]].copy()
    print(senat_affiche.to_string(index=False))

    total_senat = senat["Total_S√©nat"].sum()
    sieges_vacants = NB_SENATEURS_TOTAL - total_senat
    if sieges_vacants > 0:
        print(f"\n‚ö†Ô∏è {sieges_vacants} si√®ges vacants au S√©nat en raison du seuil √©lectoral de 5 %. Conform√©ment √† la LOE, ces si√®ges ne sont pas redistribu√©s.")
    
    graphique_senat_proportionnel(senat)
    simuler_election_presidentielle(intentions_vote)
    generer_carte_senateurs_majoritaires(region_senateurs, r"C:\Matthieu\Documents\carte_senateurs.png")

  #  print(">>> G√©n√©ration du graaphique en cours ...")

    stats_monte_carlo = simulation_monte_carlo(pourcentages)
    afficher_bornes_monte_carlo(stats_monte_carlo)

        # Exemple apr√®s ta simulation
  #  resultats = appliquer_cifra_par_district(pourcentages_filtr√©s, DISTRIBUTION_DEPUTES)
    
    # Transformer en dict de dicts r√©gion -> {parti: si√®ges}
    resultats_par_region = {}
    for district in DISTRIBUTION_DEPUTES:
        df_local = appliquer_cifra_par_district(
            pourcentages_filtr√©s,
            {district: DISTRIBUTION_DEPUTES[district]},
            perturbations=perturbations_par_district
        )
        resultats_par_region[district] = dict(zip(df_local["Parti"], df_local["Si√®ges"]))

        # Stockage console (facultatif, √† adapter selon ce que tu veux capturer)
    
    buffer = StringIO()
    sys_stdout = sys.stdout
    sys.stdout = buffer
 
        # G√©n√©rer la carte r√©gionale √† partir du parti dominant par district
    repartition_par_region = {}
    
    # Pour chaque district, on r√©p√®te une mini-simulation et on prend le parti majoritaire
    for district, nb_sieges in DISTRIBUTION_DEPUTES.items():
        # G√©n√®re des votes simul√©s dans ce district
        perturbation = {p: max(0, v + random.uniform(-2, 2)) for p, v in pourcentages_filtr√©s.items()}
        total_valid = sum(perturbation.values())
        votes = {p: perturbation[p] / total_valid * 1000000 for p in perturbation}
        gagnant = max(votes.items(), key=lambda x: x[1])[0]
        repartition_par_region[district] = gagnant
    
  #  generer_carte_deputes_par_region(
  #      repartition_par_region,
  #      titre="Parti victorieux par d√©partements (d√©put√©s)",
  #      fichier_sortie=r"C:\Matthieu\Documents\carte_deputes.png"
   # )

    generer_carte_par_sieges(resultats_par_region, r"C:\Matthieu\Documents\carte_par_sieges.png")

    # Rejouer une mini synth√®se textuelle
    print("=== R√©sum√© de la simulation ===")
    for parti, pct in sorted(pourcentages_filtr√©s.items(), key=lambda x: x[1], reverse=True):
        print(f"{parti}: {pct:.1f}%")

    print("\nR√©partition d√©put√©s :")
    print(deputes.to_string(index=False))
    comparaison = comparer_resultats(deputes, resultats_2021)
    print(f"\n{'Parti':<25}{'2021':>6}{'Simul√©':>8}{'√âcart':>7}")
    for parti, s2021, s_sim, ecart in comparaison:
        print(f"{parti:<25}{s2021:>6}{s_sim:>8}{ecart:>7}")
    
    print("\nR√©partition s√©nat :")
    print(senat.to_string(index=False))

    print("\nMonte Carlo :")
    print(stats_monte_carlo.to_string())

    sys.stdout = sys_stdout
    texte_console = buffer.getvalue()

    generer_rapport_word(
    chemin_dossier=r"C:\Matthieu\Documents",
    texte_console=texte_console,
    image_hemicycle_path=r"C:\Matthieu\Documents\double_hemicycle.png",
    image_montecarlo_path=r"C:\Matthieu\Documents\montecarlo_barres.png",
    image_carte_path=r"C:\Matthieu\Documents\carte_par_sieges.png",
    df_deputes=deputes,
    df_senat=senat,
    stats_monte_carlo=stats_monte_carlo
    )   
    enregistrer_resultats_excel(deputes, senat, stats_monte_carlo)

#################################################################################################################################
# SIMULATION GENERALE REPETITIVE
#################################################################################################################################

def simulation_globale_repetee(intentions_vote: Dict[str, float], n: int = 50):
    tous_deputes = []
    tous_senat = []

    for i in range(n):
        print(f"\n>>> Simulation {i+1}/{n} en cours...")
        pourcentages_filtr√©s = {p: v for p, v in intentions_vote.items() if v >= SEUIL_ELECTORAL}

        # Application pond√©rations
     #   deputes = appliquer_cifra_par_district(pourcentages_filtr√©s, DISTRIBUTION_DEPUTES)
       # deputes["Si√®ges"] = deputes.apply(
        #    lambda row: int(round(row["Si√®ges"] * pond√©rations_personnelles.get(row["Parti"], 1.0))), axis=1
       # )

        # Cr√©er les r√©sultats r√©gionaux (comme pour la carte)
        # ‚û§ Transforme en dict de dicts pour la carte
        resultats_par_region = {}
        for district in DISTRIBUTION_DEPUTES:
            df_local = appliquer_cifra_par_district(pourcentages_filtr√©s, {district: DISTRIBUTION_DEPUTES[district]})
            resultats_par_region[district] = dict(zip(df_local["Parti"], df_local["Si√®ges"]))


        # ‚û§ Agr√©ger tous les r√©sultats r√©gionaux
        totaux_deputes_depuis_carte = defaultdict(int)
        for region, resultats in resultats_par_region.items():
            for parti, nb_sieges in resultats.items():
                totaux_deputes_depuis_carte[parti] += nb_sieges
        
        # ‚û§ Convertir en DataFrame utilisable par le demi-h√©micycle
        deputes = pd.DataFrame({
            "Parti": list(totaux_deputes_depuis_carte.keys()),
            "Si√®ges": list(totaux_deputes_depuis_carte.values())
        })

        senat, _ = simulateur_senat(intentions_vote, pourcentages_filtr√©s)

      #  senat["Total_S√©nat"] = senat.apply(
        #    lambda row: int(round(row["Total_S√©nat"] * pond√©rations_personnelles.get(row["Parti"], 1.0))), axis=1
       # )

        tous_deputes.append(deputes.set_index("Parti")["Si√®ges"])
        tous_senat.append(senat.set_index("Parti")["Total_S√©nat"])

    # Calcul des moyennes
    moy_deputes = pd.concat(tous_deputes, axis=1).fillna(0).mean(axis=1).round(2).sort_values(ascending=False)
    moy_senat = pd.concat(tous_senat, axis=1).fillna(0).mean(axis=1).round(2).sort_values(ascending=False)

    print("\n============== Moyenne des r√©sultats apr√®s", n, "simulations ==============\n")
    print("üü¶ D√©put√©s (130 si√®ges) :")
    print(moy_deputes.to_string())

    print("\nüü• S√©nat (60 si√®ges) :")
    print(moy_senat.to_string())

    return moy_deputes, moy_senat

#################################################################################################################################
# SAISIR LES INTENTIONS DE VOTE REPETEES
#################################################################################################################################

if __name__ == "__main__":
    intentions_voteR = {
        "Fuerza Popular": 11.34,
        "Acci√≥n Popular": 9.02,
        "Per√∫ Libre": 13.41,
        "Alianza para el Progreso": 7.54,
        "Renovaci√≥n Popular": 9.33,
        "Avanza Pais": 7.54,
        "Juntos por el Per√∫": 6.59,
        "Somos Per√∫": 6.13,
        "Podemos Per√∫": 5.83,
        "Partido Morado": 5.42,
        "Victoria Nacional": 4.96,
        "Frepap": 4.58,
        "Uni√≥n por el Per√∫": 2.07,
        "PPC": 1.65,
        "PNP": 1.52,
        "FA": 1.05
    }
    simulation_globale_repetee(intentions_voteR, n=1)

#################################################################################################################################
# SAISIR LES INTENTIONS DE VOTE 
#################################################################################################################################
"""
if __name__ == "__main__":
    intentions_vote = {
        "Fuerza Popular": 11.34,
        "Acci√≥n Popular": 9.02,
        "Per√∫ Libre": 13.41,
        "Alianza para el Progreso": 7.54,
        "Renovaci√≥n Popular": 9.33,
        "Avanza Pais": 7.54,
        "Juntos por el Per√∫": 6.59,
        "Somos Per√∫": 6.13,
        "Podemos Per√∫": 5.83,
        "Partido Morado": 5.42,
        "Victoria Nacional": 4.96,
        "Frepap": 4.58,
        "Uni√≥n por el Per√∫": 2.07,
        "PPC": 1.65,
        "PNP": 1.52,
        "FA": 1.05
    }
    simulation_globale(intentions_vote)
"""
#################################################################################################################################
# SAISIR LES INTENTIONS DE VOTE 2
#################################################################################################################################

if __name__ == "__main__":
    intentions_vote = {
        "Fuerza Popular": 11.34,
        "Acci√≥n Popular": 9.02,
        "Per√∫ Libre": 13.41,
        "Alianza para el Progreso": 7.54,
        "Renovaci√≥n Popular": 9.33,
        "Avanza Pais": 7.54,
        "Juntos por el Per√∫": 6.59,
        "Somos Per√∫": 6.13,
        "Podemos Per√∫": 5.83,
        "Partido Morado": 5.42,
        "Victoria Nacional": 4.96,
        "Frepap": 4.58,
        "Uni√≥n por el Per√∫": 2.07,
        "PPC": 1.65,
        "PNP": 1.52,
        "FA": 1.05
    }
    simulation_globale(intentions_vote)
